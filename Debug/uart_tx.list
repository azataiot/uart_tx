
uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004198  08004198  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a0  080041a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  20000070  08004218  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  08004218  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5c0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b92  00000000  00000000  0002b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f52  00000000  00000000  0002e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b845  00000000  00000000  000500e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b33  00000000  00000000  0005b927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e45a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  0012e4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004034 	.word	0x08004034

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004034 	.word	0x08004034

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b974 	b.w	8000534 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	4604      	mov	r4, r0
 800026c:	468e      	mov	lr, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14d      	bne.n	800030e <__udivmoddi4+0xaa>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d969      	bls.n	800034c <__udivmoddi4+0xe8>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b152      	cbz	r2, 8000294 <__udivmoddi4+0x30>
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	f1c2 0120 	rsb	r1, r2, #32
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	fa0c fc02 	lsl.w	ip, ip, r2
 800028e:	ea41 0e03 	orr.w	lr, r1, r3
 8000292:	4094      	lsls	r4, r2
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	0c21      	lsrs	r1, r4, #16
 800029a:	fbbe f6f8 	udiv	r6, lr, r8
 800029e:	fa1f f78c 	uxth.w	r7, ip
 80002a2:	fb08 e316 	mls	r3, r8, r6, lr
 80002a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002aa:	fb06 f107 	mul.w	r1, r6, r7
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 811f 	bcs.w	80004fc <__udivmoddi4+0x298>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 811c 	bls.w	80004fc <__udivmoddi4+0x298>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x92>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 810a 	bcs.w	8000500 <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8107 	bls.w	8000500 <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	1be4      	subs	r4, r4, r7
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa4>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xc2>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80ef 	beq.w	80004f6 <__udivmoddi4+0x292>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x160>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd4>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80f9 	bhi.w	800052a <__udivmoddi4+0x2c6>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	469e      	mov	lr, r3
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa4>
 8000346:	e9c5 4e00 	strd	r4, lr, [r5]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa4>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xec>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 8092 	bne.w	800047e <__udivmoddi4+0x21a>
 800035a:	eba1 010c 	sub.w	r1, r1, ip
 800035e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000362:	fa1f fe8c 	uxth.w	lr, ip
 8000366:	2601      	movs	r6, #1
 8000368:	0c20      	lsrs	r0, r4, #16
 800036a:	fbb1 f3f7 	udiv	r3, r1, r7
 800036e:	fb07 1113 	mls	r1, r7, r3, r1
 8000372:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000376:	fb0e f003 	mul.w	r0, lr, r3
 800037a:	4288      	cmp	r0, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x12c>
 800037e:	eb1c 0101 	adds.w	r1, ip, r1
 8000382:	f103 38ff 	add.w	r8, r3, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x12a>
 8000388:	4288      	cmp	r0, r1
 800038a:	f200 80cb 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 800038e:	4643      	mov	r3, r8
 8000390:	1a09      	subs	r1, r1, r0
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb1 f0f7 	udiv	r0, r1, r7
 8000398:	fb07 1110 	mls	r1, r7, r0, r1
 800039c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a0:	fb0e fe00 	mul.w	lr, lr, r0
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x156>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x154>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80bb 	bhi.w	800052e <__udivmoddi4+0x2ca>
 80003b8:	4608      	mov	r0, r1
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	e79c      	b.n	80002fe <__udivmoddi4+0x9a>
 80003c4:	f1c6 0720 	rsb	r7, r6, #32
 80003c8:	40b3      	lsls	r3, r6
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f407 	lsr.w	r4, r0, r7
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	431c      	orrs	r4, r3
 80003dc:	40f9      	lsrs	r1, r7
 80003de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e2:	fa00 f306 	lsl.w	r3, r0, r6
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	0c20      	lsrs	r0, r4, #16
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fb09 1118 	mls	r1, r9, r8, r1
 80003f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f8:	fb08 f00e 	mul.w	r0, r8, lr
 80003fc:	4288      	cmp	r0, r1
 80003fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2bc>
 8000410:	4288      	cmp	r0, r1
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2bc>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4461      	add	r1, ip
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f9 	udiv	r0, r1, r9
 8000424:	fb09 1110 	mls	r1, r9, r0, r1
 8000428:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000430:	458e      	cmp	lr, r1
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1e2>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f100 34ff 	add.w	r4, r0, #4294967295
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2b4>
 800043e:	458e      	cmp	lr, r1
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2b4>
 8000442:	3802      	subs	r0, #2
 8000444:	4461      	add	r1, ip
 8000446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044a:	fba0 9402 	umull	r9, r4, r0, r2
 800044e:	eba1 010e 	sub.w	r1, r1, lr
 8000452:	42a1      	cmp	r1, r4
 8000454:	46c8      	mov	r8, r9
 8000456:	46a6      	mov	lr, r4
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x2a4>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x2a0>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x212>
 800045e:	ebb3 0208 	subs.w	r2, r3, r8
 8000462:	eb61 010e 	sbc.w	r1, r1, lr
 8000466:	fa01 f707 	lsl.w	r7, r1, r7
 800046a:	fa22 f306 	lsr.w	r3, r2, r6
 800046e:	40f1      	lsrs	r1, r6
 8000470:	431f      	orrs	r7, r3
 8000472:	e9c5 7100 	strd	r7, r1, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1c2 0320 	rsb	r3, r2, #32
 8000482:	40d8      	lsrs	r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa21 f303 	lsr.w	r3, r1, r3
 800048c:	4091      	lsls	r1, r2
 800048e:	4301      	orrs	r1, r0
 8000490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fbb3 f0f7 	udiv	r0, r3, r7
 800049c:	fb07 3610 	mls	r6, r7, r0, r3
 80004a0:	0c0b      	lsrs	r3, r1, #16
 80004a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a6:	fb00 f60e 	mul.w	r6, r0, lr
 80004aa:	429e      	cmp	r6, r3
 80004ac:	fa04 f402 	lsl.w	r4, r4, r2
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x260>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b8>
 80004bc:	429e      	cmp	r6, r3
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b8>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1b9b      	subs	r3, r3, r6
 80004c6:	b289      	uxth	r1, r1
 80004c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004cc:	fb07 3316 	mls	r3, r7, r6, r3
 80004d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d4:	fb06 f30e 	mul.w	r3, r6, lr
 80004d8:	428b      	cmp	r3, r1
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x28a>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004ea:	3e02      	subs	r6, #2
 80004ec:	4461      	add	r1, ip
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0x104>
 80004f6:	462e      	mov	r6, r5
 80004f8:	4628      	mov	r0, r5
 80004fa:	e705      	b.n	8000308 <__udivmoddi4+0xa4>
 80004fc:	4606      	mov	r6, r0
 80004fe:	e6e3      	b.n	80002c8 <__udivmoddi4+0x64>
 8000500:	4618      	mov	r0, r3
 8000502:	e6f8      	b.n	80002f6 <__udivmoddi4+0x92>
 8000504:	454b      	cmp	r3, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f8>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000510:	3801      	subs	r0, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f8>
 8000514:	4646      	mov	r6, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x28a>
 8000518:	4620      	mov	r0, r4
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1e2>
 800051c:	4640      	mov	r0, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x260>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b8>
 8000524:	3b02      	subs	r3, #2
 8000526:	4461      	add	r1, ip
 8000528:	e732      	b.n	8000390 <__udivmoddi4+0x12c>
 800052a:	4630      	mov	r0, r6
 800052c:	e709      	b.n	8000342 <__udivmoddi4+0xde>
 800052e:	4464      	add	r4, ip
 8000530:	3802      	subs	r0, #2
 8000532:	e742      	b.n	80003ba <__udivmoddi4+0x156>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <pin2hal>:

#include "azt.h"
#include "string.h"
#include "stdlib.h"

PIN pin2hal(char *pin) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	PIN gpio;
	char bank[2];
	char num[2];
	strncpy(bank, pin, 2);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	2202      	movs	r2, #2
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fcd2 	bl	8003ef4 <strncpy>
	strncpy(num, &pin[2], 2);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	1c99      	adds	r1, r3, #2
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2202      	movs	r2, #2
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fcca 	bl	8003ef4 <strncpy>
	bank[2] = '\0';
 8000560:	2300      	movs	r3, #0
 8000562:	74bb      	strb	r3, [r7, #18]
	num[2] = '\0';
 8000564:	2300      	movs	r3, #0
 8000566:	73bb      	strb	r3, [r7, #14]
	// get bank
	if (strcmp(bank, "PA") == 0) {
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	496c      	ldr	r1, [pc, #432]	; (8000720 <pin2hal+0x1e8>)
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe56 	bl	8000220 <strcmp>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d102      	bne.n	8000580 <pin2hal+0x48>
		gpio.BANK = GPIOA;
 800057a:	4b6a      	ldr	r3, [pc, #424]	; (8000724 <pin2hal+0x1ec>)
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	e05e      	b.n	800063e <pin2hal+0x106>
	} else if (strcmp(bank, "PB") == 0) {
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4968      	ldr	r1, [pc, #416]	; (8000728 <pin2hal+0x1f0>)
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fe4a 	bl	8000220 <strcmp>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <pin2hal+0x60>
		gpio.BANK = GPIOB;
 8000592:	4b66      	ldr	r3, [pc, #408]	; (800072c <pin2hal+0x1f4>)
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e052      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PC") == 0) {
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4964      	ldr	r1, [pc, #400]	; (8000730 <pin2hal+0x1f8>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe3e 	bl	8000220 <strcmp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d102      	bne.n	80005b0 <pin2hal+0x78>
		gpio.BANK = GPIOC;
 80005aa:	4b62      	ldr	r3, [pc, #392]	; (8000734 <pin2hal+0x1fc>)
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e046      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PD") == 0) {
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4960      	ldr	r1, [pc, #384]	; (8000738 <pin2hal+0x200>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fe32 	bl	8000220 <strcmp>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d102      	bne.n	80005c8 <pin2hal+0x90>
		gpio.BANK = GPIOD;
 80005c2:	4b5e      	ldr	r3, [pc, #376]	; (800073c <pin2hal+0x204>)
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e03a      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PE") == 0) {
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	495c      	ldr	r1, [pc, #368]	; (8000740 <pin2hal+0x208>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe26 	bl	8000220 <strcmp>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d102      	bne.n	80005e0 <pin2hal+0xa8>
		gpio.BANK = GPIOE;
 80005da:	4b5a      	ldr	r3, [pc, #360]	; (8000744 <pin2hal+0x20c>)
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e02e      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PF") == 0) {
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4958      	ldr	r1, [pc, #352]	; (8000748 <pin2hal+0x210>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fe1a 	bl	8000220 <strcmp>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d102      	bne.n	80005f8 <pin2hal+0xc0>
		gpio.BANK = GPIOF;
 80005f2:	4b56      	ldr	r3, [pc, #344]	; (800074c <pin2hal+0x214>)
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e022      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PG") == 0) {
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4954      	ldr	r1, [pc, #336]	; (8000750 <pin2hal+0x218>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fe0e 	bl	8000220 <strcmp>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <pin2hal+0xd8>
		gpio.BANK = GPIOG;
 800060a:	4b52      	ldr	r3, [pc, #328]	; (8000754 <pin2hal+0x21c>)
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e016      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PH") == 0) {
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4950      	ldr	r1, [pc, #320]	; (8000758 <pin2hal+0x220>)
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fe02 	bl	8000220 <strcmp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <pin2hal+0xf0>
		gpio.BANK = GPIOH;
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <pin2hal+0x224>)
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e00a      	b.n	800063e <pin2hal+0x106>

	} else if (strcmp(bank, "PI") == 0) {
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	494c      	ldr	r1, [pc, #304]	; (8000760 <pin2hal+0x228>)
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdf6 	bl	8000220 <strcmp>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <pin2hal+0x106>
		gpio.BANK = GPIOI;
 800063a:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <pin2hal+0x22c>)
 800063c:	617b      	str	r3, [r7, #20]
	}

	// get pin number
	int num_nature;
	num_nature = atoi(num);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fc1f 	bl	8003e86 <atoi>
 8000648:	61f8      	str	r0, [r7, #28]
	switch (num_nature) {
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d85b      	bhi.n	8000708 <pin2hal+0x1d0>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <pin2hal+0x120>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	08000699 	.word	0x08000699
 800065c:	0800069f 	.word	0x0800069f
 8000660:	080006a5 	.word	0x080006a5
 8000664:	080006ab 	.word	0x080006ab
 8000668:	080006b1 	.word	0x080006b1
 800066c:	080006b7 	.word	0x080006b7
 8000670:	080006bd 	.word	0x080006bd
 8000674:	080006c3 	.word	0x080006c3
 8000678:	080006c9 	.word	0x080006c9
 800067c:	080006d1 	.word	0x080006d1
 8000680:	080006d9 	.word	0x080006d9
 8000684:	080006e1 	.word	0x080006e1
 8000688:	080006e9 	.word	0x080006e9
 800068c:	080006f1 	.word	0x080006f1
 8000690:	080006f9 	.word	0x080006f9
 8000694:	08000701 	.word	0x08000701
	case 0:
		gpio.NUM = GPIO_PIN_0;
 8000698:	2301      	movs	r3, #1
 800069a:	833b      	strh	r3, [r7, #24]
		break;
 800069c:	e034      	b.n	8000708 <pin2hal+0x1d0>
	case 1:
		gpio.NUM = GPIO_PIN_1;
 800069e:	2302      	movs	r3, #2
 80006a0:	833b      	strh	r3, [r7, #24]
		break;
 80006a2:	e031      	b.n	8000708 <pin2hal+0x1d0>
	case 2:
		gpio.NUM = GPIO_PIN_2;
 80006a4:	2304      	movs	r3, #4
 80006a6:	833b      	strh	r3, [r7, #24]
		break;
 80006a8:	e02e      	b.n	8000708 <pin2hal+0x1d0>
	case 3:
		gpio.NUM = GPIO_PIN_3;
 80006aa:	2308      	movs	r3, #8
 80006ac:	833b      	strh	r3, [r7, #24]
		break;
 80006ae:	e02b      	b.n	8000708 <pin2hal+0x1d0>
	case 4:
		gpio.NUM = GPIO_PIN_4;
 80006b0:	2310      	movs	r3, #16
 80006b2:	833b      	strh	r3, [r7, #24]
		break;
 80006b4:	e028      	b.n	8000708 <pin2hal+0x1d0>
	case 5:
		gpio.NUM = GPIO_PIN_5;
 80006b6:	2320      	movs	r3, #32
 80006b8:	833b      	strh	r3, [r7, #24]
		break;
 80006ba:	e025      	b.n	8000708 <pin2hal+0x1d0>
	case 6:
		gpio.NUM = GPIO_PIN_6;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	833b      	strh	r3, [r7, #24]
		break;
 80006c0:	e022      	b.n	8000708 <pin2hal+0x1d0>
	case 7:
		gpio.NUM = GPIO_PIN_7;
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	833b      	strh	r3, [r7, #24]
		break;
 80006c6:	e01f      	b.n	8000708 <pin2hal+0x1d0>
	case 8:
		gpio.NUM = GPIO_PIN_8;
 80006c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006cc:	833b      	strh	r3, [r7, #24]
		break;
 80006ce:	e01b      	b.n	8000708 <pin2hal+0x1d0>
	case 9:
		gpio.NUM = GPIO_PIN_9;
 80006d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d4:	833b      	strh	r3, [r7, #24]
		break;
 80006d6:	e017      	b.n	8000708 <pin2hal+0x1d0>
	case 10:
		gpio.NUM = GPIO_PIN_10;
 80006d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006dc:	833b      	strh	r3, [r7, #24]
		break;
 80006de:	e013      	b.n	8000708 <pin2hal+0x1d0>
	case 11:
		gpio.NUM = GPIO_PIN_11;
 80006e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e4:	833b      	strh	r3, [r7, #24]
		break;
 80006e6:	e00f      	b.n	8000708 <pin2hal+0x1d0>
	case 12:
		gpio.NUM = GPIO_PIN_12;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	833b      	strh	r3, [r7, #24]
		break;
 80006ee:	e00b      	b.n	8000708 <pin2hal+0x1d0>
	case 13:
		gpio.NUM = GPIO_PIN_13;
 80006f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f4:	833b      	strh	r3, [r7, #24]
		break;
 80006f6:	e007      	b.n	8000708 <pin2hal+0x1d0>
	case 14:
		gpio.NUM = GPIO_PIN_14;
 80006f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fc:	833b      	strh	r3, [r7, #24]
		break;
 80006fe:	e003      	b.n	8000708 <pin2hal+0x1d0>
	case 15:
		gpio.NUM = GPIO_PIN_15;
 8000700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000704:	833b      	strh	r3, [r7, #24]
		break;
 8000706:	bf00      	nop
	}

	// return the pin
	return gpio;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	461a      	mov	r2, r3
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000714:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	0800404c 	.word	0x0800404c
 8000724:	40020000 	.word	0x40020000
 8000728:	08004050 	.word	0x08004050
 800072c:	40020400 	.word	0x40020400
 8000730:	08004054 	.word	0x08004054
 8000734:	40020800 	.word	0x40020800
 8000738:	08004058 	.word	0x08004058
 800073c:	40020c00 	.word	0x40020c00
 8000740:	0800405c 	.word	0x0800405c
 8000744:	40021000 	.word	0x40021000
 8000748:	08004060 	.word	0x08004060
 800074c:	40021400 	.word	0x40021400
 8000750:	08004064 	.word	0x08004064
 8000754:	40021800 	.word	0x40021800
 8000758:	08004068 	.word	0x08004068
 800075c:	40021c00 	.word	0x40021c00
 8000760:	0800406c 	.word	0x0800406c
 8000764:	40022000 	.word	0x40022000

08000768 <delay>:

// delay
void delay(uint32_t ms){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 fb39 	bl	8000de8 <HAL_Delay>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <togglePin>:
void digitalWrite(char *pin, uint8_t val) {
	PIN gpio_pin = pin2hal(pin);
	HAL_GPIO_WritePin(gpio_pin.BANK, gpio_pin.NUM, val);
}

void togglePin(char *pin){
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	PIN gpio_pin = pin2hal(pin);
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fed3 	bl	8000538 <pin2hal>
	HAL_GPIO_TogglePin(gpio_pin.BANK, gpio_pin.NUM);
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	89ba      	ldrh	r2, [r7, #12]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fa1a 	bl	8001bd2 <HAL_GPIO_TogglePin>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <toggleLED>:
 */

#include <led.h>


void toggleLED(uint32_t ms){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	togglePin("PE3");
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <toggleLED+0x1c>)
 80007b2:	f7ff ffe4 	bl	800077e <togglePin>
	delay(ms);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffd6 	bl	8000768 <delay>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	08004070 	.word	0x08004070

080007c8 <HAL_UART_TxHalfCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t data[2000];
uint8_t count = 0;

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 1000; var++) {
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e007      	b.n	80007e6 <HAL_UART_TxHalfCpltCallback+0x1e>
		data [var] = 'z';
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_UART_TxHalfCpltCallback+0x34>)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	227a      	movs	r2, #122	; 0x7a
 80007de:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 1000; var++) {
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ec:	dbf3      	blt.n	80007d6 <HAL_UART_TxHalfCpltCallback+0xe>

	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	20000170 	.word	0x20000170

08000800 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	for (int var = 1000; var < 2000; var++) {
 8000808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	e007      	b.n	8000820 <HAL_UART_TxCpltCallback+0x20>
		data [var] = 'y';
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <HAL_UART_TxCpltCallback+0x38>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	2279      	movs	r2, #121	; 0x79
 8000818:	701a      	strb	r2, [r3, #0]
	for (int var = 1000; var < 2000; var++) {
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3301      	adds	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000826:	dbf3      	blt.n	8000810 <HAL_UART_TxCpltCallback+0x10>

	}
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000170 	.word	0x20000170

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fa75 	bl	8000d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f832 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 f8ea 	bl	8000a20 <MX_GPIO_Init>
  MX_DMA_Init();
 800084c:	f000 f8ca 	bl	80009e4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000850:	f000 f898 	bl	8000984 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Transmit_DMA(&huart3, data, sizeof(data));
 8000854:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000858:	4910      	ldr	r1, [pc, #64]	; (800089c <main+0x60>)
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <main+0x64>)
 800085c:	f002 fa46 	bl	8002cec <HAL_UART_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// toggle led in every 250 ms
		toggleLED(100);
 8000860:	2064      	movs	r0, #100	; 0x64
 8000862:	f7ff ffa1 	bl	80007a8 <toggleLED>
		count++;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <main+0x68>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <main+0x68>)
 8000870:	701a      	strb	r2, [r3, #0]
		if ((count % 20) == 0) {
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <main+0x68>)
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <main+0x6c>)
 8000878:	fba3 1302 	umull	r1, r3, r3, r2
 800087c:	0919      	lsrs	r1, r3, #4
 800087e:	460b      	mov	r3, r1
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1e8      	bne.n	8000860 <main+0x24>
			HAL_UART_Transmit_DMA(&huart3, data, sizeof(data));
 800088e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000892:	4902      	ldr	r1, [pc, #8]	; (800089c <main+0x60>)
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <main+0x64>)
 8000896:	f002 fa29 	bl	8002cec <HAL_UART_Transmit_DMA>
		toggleLED(100);
 800089a:	e7e1      	b.n	8000860 <main+0x24>
 800089c:	20000170 	.word	0x20000170
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	20000940 	.word	0x20000940
 80008a8:	cccccccd 	.word	0xcccccccd

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fb12 	bl	8003ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <SystemClock_Config+0xd0>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a29      	ldr	r2, [pc, #164]	; (800097c <SystemClock_Config+0xd0>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <SystemClock_Config+0xd0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a24      	ldr	r2, [pc, #144]	; (8000980 <SystemClock_Config+0xd4>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SystemClock_Config+0xd4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000914:	2308      	movs	r3, #8
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000918:	23d8      	movs	r3, #216	; 0xd8
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f9bd 	bl	8001ca8 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000934:	f000 f8be 	bl	8000ab4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000938:	f001 f966 	bl	8001c08 <HAL_PWREx_EnableOverDrive>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000942:	f000 f8b7 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2302      	movs	r3, #2
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000952:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2107      	movs	r1, #7
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fc43 	bl	80021f0 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000970:	f000 f8a0 	bl	8000ab4 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3750      	adds	r7, #80	; 0x50
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART3_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART3_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART3_UART_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART3_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART3_UART_Init+0x58>)
 80009c8:	f002 f942 	bl	8002c50 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f86f 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	40004800 	.word	0x40004800

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DMA_Init+0x38>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <MX_DMA_Init+0x38>)
 80009f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_DMA_Init+0x38>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	200e      	movs	r0, #14
 8000a08:	f000 faed 	bl	8000fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a0c:	200e      	movs	r0, #14
 8000a0e:	f000 fb06 	bl	800101e <HAL_NVIC_EnableIRQ>

}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_GPIO_Init+0x8c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <MX_GPIO_Init+0x90>)
 8000a84:	f001 f88c 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_GPIO_Init+0x90>)
 8000aa0:	f000 fee2 	bl	8001868 <HAL_GPIO_Init>

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0aa      	sub	sp, #168	; 0xa8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f9db 	bl	8003ee4 <memset>
  if(huart->Instance==USART3)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a3d      	ldr	r2, [pc, #244]	; (8000c28 <HAL_UART_MspInit+0x120>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d172      	bne.n	8000c1e <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fd38 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b52:	f7ff ffaf 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_UART_MspInit+0x124>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <HAL_UART_MspInit+0x124>)
 8000b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <HAL_UART_MspInit+0x124>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <HAL_UART_MspInit+0x124>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <HAL_UART_MspInit+0x124>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <HAL_UART_MspInit+0x124>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000baa:	4619      	mov	r1, r3
 8000bac:	4820      	ldr	r0, [pc, #128]	; (8000c30 <HAL_UART_MspInit+0x128>)
 8000bae:	f000 fe5b 	bl	8001868 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bb4:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <HAL_UART_MspInit+0x130>)
 8000bb6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bf4:	f000 fa2e 	bl	8001054 <HAL_DMA_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000bfe:	f7ff ff59 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000c06:	66da      	str	r2, [r3, #108]	; 0x6c
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_UART_MspInit+0x12c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2027      	movs	r0, #39	; 0x27
 8000c14:	f000 f9e7 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c18:	2027      	movs	r0, #39	; 0x27
 8000c1a:	f000 fa00 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	37a8      	adds	r7, #168	; 0xa8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	20000110 	.word	0x20000110
 8000c38:	40026058 	.word	0x40026058

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f88e 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA1_Stream3_IRQHandler+0x10>)
 8000c96:	f000 fb7d 	bl	8001394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000110 	.word	0x20000110

08000ca4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <USART3_IRQHandler+0x10>)
 8000caa:	f002 f8af 	bl	8002e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000008c 	.word	0x2000008c

08000cb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf8:	4c0b      	ldr	r4, [pc, #44]	; (8000d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d06:	f7ff ffd7 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f003 f8c7 	bl	8003e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fd95 	bl	800083c <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d20:	080041a8 	.word	0x080041a8
  ldr r2, =_sbss
 8000d24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d28:	20000948 	.word	0x20000948

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>

08000d2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 f94c 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f000 f805 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3e:	f7ff febf 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000944 	.word	0x20000944

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000944 	.word	0x20000944

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <__NVIC_SetPriorityGrouping+0x40>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x40>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00
 8000e74:	05fa0000 	.word	0x05fa0000

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff feb6 	bl	8000dd0 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e099      	b.n	80011a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001090:	e00f      	b.n	80010b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001092:	f7ff fe9d 	bl	8000dd0 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b05      	cmp	r3, #5
 800109e:	d908      	bls.n	80010b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2220      	movs	r2, #32
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e078      	b.n	80011a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e8      	bne.n	8001092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_DMA_Init+0x158>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4313      	orrs	r3, r2
 8001102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	2b04      	cmp	r3, #4
 800110a:	d107      	bne.n	800111c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	4313      	orrs	r3, r2
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4313      	orrs	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f023 0307 	bic.w	r3, r3, #7
 8001132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b04      	cmp	r3, #4
 8001144:	d117      	bne.n	8001176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00e      	beq.n	8001176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fb09 	bl	8001770 <DMA_CheckFifoParam>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001172:	2301      	movs	r3, #1
 8001174:	e016      	b.n	80011a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fac0 	bl	8001704 <DMA_CalcBaseAndBitshift>
 8001184:	4603      	mov	r3, r0
 8001186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118c:	223f      	movs	r2, #63	; 0x3f
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	e010803f 	.word	0xe010803f

080011b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_DMA_Start_IT+0x26>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e048      	b.n	8001268 <HAL_DMA_Start_IT+0xb8>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d137      	bne.n	800125a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2202      	movs	r2, #2
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fa52 	bl	80016a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0216 	orr.w	r2, r2, #22
 800121e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800122e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d007      	beq.n	8001248 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0208 	orr.w	r2, r2, #8
 8001246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e005      	b.n	8001266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001262:	2302      	movs	r3, #2
 8001264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001266:	7dfb      	ldrb	r3, [r7, #23]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800127e:	f7ff fda7 	bl	8000dd0 <HAL_GetTick>
 8001282:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d008      	beq.n	80012a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e052      	b.n	8001348 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0216 	bic.w	r2, r2, #22
 80012b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <HAL_DMA_Abort+0x62>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0208 	bic.w	r2, r2, #8
 80012e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f2:	e013      	b.n	800131c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f4:	f7ff fd6c 	bl	8000dd0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d90c      	bls.n	800131c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e015      	b.n	8001348 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1e4      	bne.n	80012f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	223f      	movs	r2, #63	; 0x3f
 8001330:	409a      	lsls	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d004      	beq.n	800136e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00c      	b.n	8001388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80013a0:	4b8e      	ldr	r3, [pc, #568]	; (80015dc <HAL_DMA_IRQHandler+0x248>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a8e      	ldr	r2, [pc, #568]	; (80015e0 <HAL_DMA_IRQHandler+0x24c>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0a9b      	lsrs	r3, r3, #10
 80013ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2208      	movs	r2, #8
 80013c0:	409a      	lsls	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01a      	beq.n	8001400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0204 	bic.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2208      	movs	r2, #8
 80013ee:	409a      	lsls	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2201      	movs	r2, #1
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d012      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2201      	movs	r2, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f043 0202 	orr.w	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2204      	movs	r2, #4
 800143c:	409a      	lsls	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2204      	movs	r2, #4
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	f043 0204 	orr.w	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2210      	movs	r2, #16
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d043      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d03c      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	2210      	movs	r2, #16
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d018      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d108      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d024      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
 80014c2:	e01f      	b.n	8001504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
 80014d4:	e016      	b.n	8001504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0208 	bic.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2220      	movs	r2, #32
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 808f 	beq.w	8001634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8087 	beq.w	8001634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	2220      	movs	r2, #32
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d136      	bne.n	80015ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0216 	bic.w	r2, r2, #22
 800154c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800155c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_DMA_IRQHandler+0x1da>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0208 	bic.w	r2, r2, #8
 800157c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	223f      	movs	r2, #63	; 0x3f
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d07e      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
        }
        return;
 80015aa:	e079      	b.n	80016a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01d      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d031      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
 80015d8:	e02c      	b.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
 80015da:	bf00      	nop
 80015dc:	20000000 	.word	0x20000000
 80015e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d023      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e01e      	b.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0210 	bic.w	r2, r2, #16
 8001612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	2b00      	cmp	r3, #0
 800163a:	d032      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d022      	beq.n	800168e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2205      	movs	r2, #5
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3301      	adds	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	d307      	bcc.n	800167c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f2      	bne.n	8001660 <HAL_DMA_IRQHandler+0x2cc>
 800167a:	e000      	b.n	800167e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800167c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e000      	b.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016a0:	bf00      	nop
    }
  }
}
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d108      	bne.n	80016e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e6:	e007      	b.n	80016f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b10      	subs	r3, #16
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <DMA_CalcBaseAndBitshift+0x60>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <DMA_CalcBaseAndBitshift+0x64>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d908      	bls.n	8001744 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <DMA_CalcBaseAndBitshift+0x68>)
 800173a:	4013      	ands	r3, r2
 800173c:	1d1a      	adds	r2, r3, #4
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	659a      	str	r2, [r3, #88]	; 0x58
 8001742:	e006      	b.n	8001752 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <DMA_CalcBaseAndBitshift+0x68>)
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	0800408c 	.word	0x0800408c
 800176c:	fffffc00 	.word	0xfffffc00

08001770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11f      	bne.n	80017ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d856      	bhi.n	800183e <DMA_CheckFifoParam+0xce>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <DMA_CheckFifoParam+0x28>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017a9 	.word	0x080017a9
 800179c:	080017bb 	.word	0x080017bb
 80017a0:	080017a9 	.word	0x080017a9
 80017a4:	0800183f 	.word	0x0800183f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d046      	beq.n	8001842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b8:	e043      	b.n	8001842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c2:	d140      	bne.n	8001846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c8:	e03d      	b.n	8001846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d2:	d121      	bne.n	8001818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d837      	bhi.n	800184a <DMA_CheckFifoParam+0xda>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <DMA_CheckFifoParam+0x70>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	080017f7 	.word	0x080017f7
 80017e8:	080017f1 	.word	0x080017f1
 80017ec:	08001809 	.word	0x08001809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      break;
 80017f4:	e030      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d025      	beq.n	800184e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001806:	e022      	b.n	800184e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001810:	d11f      	bne.n	8001852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001816:	e01c      	b.n	8001852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d903      	bls.n	8001826 <DMA_CheckFifoParam+0xb6>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d003      	beq.n	800182c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001824:	e018      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
      break;
 800182a:	e015      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      break;
 800183c:	e00b      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 800183e:	bf00      	nop
 8001840:	e00a      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e008      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e006      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e004      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;   
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
    }
  } 
  
  return status; 
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e169      	b.n	8001b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8158 	bne.w	8001b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d005      	beq.n	80018be <HAL_GPIO_Init+0x56>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d017      	beq.n	800195c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d123      	bne.n	80019b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	69b9      	ldr	r1, [r7, #24]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80b2 	beq.w	8001b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a5f      	ldr	r2, [pc, #380]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02b      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x21e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x328>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x20a>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae92 	bls.w	8001888 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be4:	887a      	ldrh	r2, [r7, #2]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c36:	f7ff f8cb 	bl	8000dd0 <HAL_GetTick>
 8001c3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c3c:	e009      	b.n	8001c52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c3e:	f7ff f8c7 	bl	8000dd0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4c:	d901      	bls.n	8001c52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e022      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff f8b0 	bl	8000dd0 <HAL_GetTick>
 8001c70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c72:	e009      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c74:	f7ff f8ac 	bl	8000dd0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c82:	d901      	bls.n	8001c88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e007      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c94:	d1ee      	bne.n	8001c74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e291      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8087 	beq.w	8001dda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ccc:	4b96      	ldr	r3, [pc, #600]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd8:	4b93      	ldr	r3, [pc, #588]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d112      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
 8001ce4:	4b90      	ldr	r3, [pc, #576]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf0:	d10b      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	4b8d      	ldr	r3, [pc, #564]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x130>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d168      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e26b      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x7a>
 8001d14:	4b84      	ldr	r3, [pc, #528]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a83      	ldr	r2, [pc, #524]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e02e      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x9c>
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b7c      	ldr	r3, [pc, #496]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7b      	ldr	r2, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0xc0>
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a75      	ldr	r2, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a72      	ldr	r2, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6b      	ldr	r2, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff f822 	bl	8000dd0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff f81e 	bl	8000dd0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e21f      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe8>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f80e 	bl	8000dd0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f80a 	bl	8000dd0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e20b      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x110>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d069      	beq.n	8001eba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x190>
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1df      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	493d      	ldr	r1, [pc, #244]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e040      	b.n	8001eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ffc0 	bl	8000dd0 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7fe ffbc 	bl	8000dd0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1bd      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4929      	ldr	r1, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe ff9c 	bl	8000dd0 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7fe ff98 	bl	8000dd0 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e199      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d038      	beq.n	8001f38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7fe ff79 	bl	8000dd0 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7fe ff75 	bl	8000dd0 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e176      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x23a>
 8001f00:	e01a      	b.n	8001f38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7fe ff5f 	bl	8000dd0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe ff5b 	bl	8000dd0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d903      	bls.n	8001f2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e15c      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
 8001f28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b91      	ldr	r3, [pc, #580]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a4 	beq.w	800208e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b85      	ldr	r3, [pc, #532]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b82      	ldr	r3, [pc, #520]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f7a:	4b7f      	ldr	r3, [pc, #508]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe ff23 	bl	8000dd0 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe ff1f 	bl	8000dd0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e120      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x31a>
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a6e      	ldr	r2, [pc, #440]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x33c>
 8001fca:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a66      	ldr	r2, [pc, #408]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x35e>
 8001fec:	4b61      	ldr	r3, [pc, #388]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a60      	ldr	r2, [pc, #384]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a5d      	ldr	r2, [pc, #372]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8002006:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5a      	ldr	r2, [pc, #360]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4b58      	ldr	r3, [pc, #352]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a57      	ldr	r2, [pc, #348]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe fed3 	bl	8000dd0 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fecf 	bl	8000dd0 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ce      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x386>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe febd 	bl	8000dd0 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe feb9 	bl	8000dd0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80a4 	beq.w	80021e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d06b      	beq.n	800217c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d149      	bne.n	8002140 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a30      	ldr	r2, [pc, #192]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe8a 	bl	8000dd0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fe86 	bl	8000dd0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e087      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	4313      	orrs	r3, r2
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800210a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fe5a 	bl	8000dd0 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fe56 	bl	8000dd0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e057      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x478>
 800213e:	e04f      	b.n	80021e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fe40 	bl	8000dd0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fe3c 	bl	8000dd0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e03d      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x4ac>
 8002172:	e035      	b.n	80021e0 <HAL_RCC_OscConfig+0x538>
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x544>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d028      	beq.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d121      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d0      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 020f 	bic.w	r2, r3, #15
 800221e:	4965      	ldr	r1, [pc, #404]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b8      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002250:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a58      	ldr	r2, [pc, #352]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800225a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	494d      	ldr	r1, [pc, #308]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d040      	beq.n	8002314 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07f      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e073      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4936      	ldr	r1, [pc, #216]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e4:	f7fe fd74 	bl	8000dd0 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe fd70 	bl	8000dd0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e053      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d210      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 020f 	bic.w	r2, r3, #15
 800232a:	4922      	ldr	r1, [pc, #136]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e032      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002382:	f000 f821 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x1cc>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1d0>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fcd0 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023c00 	.word	0x40023c00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08004074 	.word	0x08004074
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20000004 	.word	0x20000004

080023c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b090      	sub	sp, #64	; 0x40
 80023ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
 80023d4:	2300      	movs	r3, #0
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d00d      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x40>
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	f200 80a1 	bhi.w	8002534 <HAL_RCC_GetSysClockFreq+0x16c>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x34>
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fa:	e09b      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_GetSysClockFreq+0x184>)
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002400:	e09b      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002402:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_GetSysClockFreq+0x188>)
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002406:	e098      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002412:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d028      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	2200      	movs	r2, #0
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	627a      	str	r2, [r7, #36]	; 0x24
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002430:	2100      	movs	r1, #0
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_GetSysClockFreq+0x188>)
 8002434:	fb03 f201 	mul.w	r2, r3, r1
 8002438:	2300      	movs	r3, #0
 800243a:	fb00 f303 	mul.w	r3, r0, r3
 800243e:	4413      	add	r3, r2
 8002440:	4a43      	ldr	r2, [pc, #268]	; (8002550 <HAL_RCC_GetSysClockFreq+0x188>)
 8002442:	fba0 1202 	umull	r1, r2, r0, r2
 8002446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002448:	460a      	mov	r2, r1
 800244a:	62ba      	str	r2, [r7, #40]	; 0x28
 800244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244e:	4413      	add	r3, r2
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	2200      	movs	r2, #0
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	61fa      	str	r2, [r7, #28]
 800245a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002462:	f7fd fee7 	bl	8000234 <__aeabi_uldivmod>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4613      	mov	r3, r2
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246e:	e053      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002470:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	2200      	movs	r2, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	617a      	str	r2, [r7, #20]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002482:	f04f 0b00 	mov.w	fp, #0
 8002486:	4652      	mov	r2, sl
 8002488:	465b      	mov	r3, fp
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	ebb2 080a 	subs.w	r8, r2, sl
 80024a2:	eb63 090b 	sbc.w	r9, r3, fp
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024ba:	ebb2 0408 	subs.w	r4, r2, r8
 80024be:	eb63 0509 	sbc.w	r5, r3, r9
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	00eb      	lsls	r3, r5, #3
 80024cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024d0:	00e2      	lsls	r2, r4, #3
 80024d2:	4614      	mov	r4, r2
 80024d4:	461d      	mov	r5, r3
 80024d6:	eb14 030a 	adds.w	r3, r4, sl
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	eb45 030b 	adc.w	r3, r5, fp
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ee:	4629      	mov	r1, r5
 80024f0:	028b      	lsls	r3, r1, #10
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f8:	4621      	mov	r1, r4
 80024fa:	028a      	lsls	r2, r1, #10
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	2200      	movs	r2, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	60fa      	str	r2, [r7, #12]
 8002508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800250c:	f7fd fe92 	bl	8000234 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetSysClockFreq+0x184>)
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800253c:	4618      	mov	r0, r3
 800253e:	3740      	adds	r7, #64	; 0x40
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	00f42400 	.word	0x00f42400
 8002550:	016e3600 	.word	0x016e3600

08002554 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_RCC_GetHCLKFreq+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000000 	.word	0x20000000

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002570:	f7ff fff0 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	08004084 	.word	0x08004084

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002598:	f7ff ffdc 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0b5b      	lsrs	r3, r3, #13
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08004084 	.word	0x08004084

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e0:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a64      	ldr	r2, [pc, #400]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025ea:	6093      	str	r3, [r2, #8]
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4960      	ldr	r1, [pc, #384]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d017      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002612:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	4955      	ldr	r1, [pc, #340]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	4946      	ldr	r1, [pc, #280]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 808b 	beq.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	4a39      	ldr	r2, [pc, #228]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002696:	6413      	str	r3, [r2, #64]	; 0x40
 8002698:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a34      	ldr	r2, [pc, #208]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fb8e 	bl	8000dd0 <HAL_GetTick>
 80026b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b8:	f7fe fb8a 	bl	8000dd0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e2bc      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ca:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d035      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d02e      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d114      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fb52 	bl	8000dd0 <HAL_GetTick>
 800272c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fb4e 	bl	8000dd0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e27e      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ee      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800275e:	d111      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800276e:	400b      	ands	r3, r1
 8002770:	4901      	ldr	r1, [pc, #4]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
 8002776:	e00b      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000
 8002780:	0ffffcff 	.word	0x0ffffcff
 8002784:	4ba4      	ldr	r3, [pc, #656]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4aa3      	ldr	r2, [pc, #652]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800278a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800278e:	6093      	str	r3, [r2, #8]
 8002790:	4ba1      	ldr	r3, [pc, #644]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	499e      	ldr	r1, [pc, #632]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d010      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027ae:	4b9a      	ldr	r3, [pc, #616]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b4:	4a98      	ldr	r2, [pc, #608]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027be:	4b96      	ldr	r3, [pc, #600]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4993      	ldr	r1, [pc, #588]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027dc:	4b8e      	ldr	r3, [pc, #568]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	498b      	ldr	r1, [pc, #556]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027fe:	4b86      	ldr	r3, [pc, #536]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	4982      	ldr	r1, [pc, #520]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002820:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282e:	497a      	ldr	r1, [pc, #488]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002842:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	4971      	ldr	r1, [pc, #452]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f023 020c 	bic.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4969      	ldr	r1, [pc, #420]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002886:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	4960      	ldr	r1, [pc, #384]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a8:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	4958      	ldr	r1, [pc, #352]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ca:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	494f      	ldr	r1, [pc, #316]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	4947      	ldr	r1, [pc, #284]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800290e:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	493e      	ldr	r1, [pc, #248]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d011      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	492d      	ldr	r1, [pc, #180]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002970:	d101      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002982:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002990:	4921      	ldr	r1, [pc, #132]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b2:	4919      	ldr	r1, [pc, #100]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d4:	4910      	ldr	r1, [pc, #64]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d006      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 809d 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe f9e8 	bl	8000dd0 <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a02:	e00b      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a04:	f7fe f9e4 	bl	8000dd0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d904      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e116      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a1c:	4b8b      	ldr	r3, [pc, #556]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ed      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d113      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a3c:	4b83      	ldr	r3, [pc, #524]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a42:	0e1b      	lsrs	r3, r3, #24
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	019a      	lsls	r2, r3, #6
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	071b      	lsls	r3, r3, #28
 8002a5c:	497b      	ldr	r1, [pc, #492]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8e:	d11f      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a90:	4b6e      	ldr	r3, [pc, #440]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	0f1b      	lsrs	r3, r3, #28
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	019a      	lsls	r2, r3, #6
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	071b      	lsls	r3, r3, #28
 8002ab0:	4966      	ldr	r1, [pc, #408]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ab8:	4b64      	ldr	r3, [pc, #400]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002abe:	f023 021f 	bic.w	r2, r3, #31
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	4960      	ldr	r1, [pc, #384]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	019a      	lsls	r2, r3, #6
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	071b      	lsls	r3, r3, #28
 8002af0:	4956      	ldr	r1, [pc, #344]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002af8:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a53      	ldr	r2, [pc, #332]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe f964 	bl	8000dd0 <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b0c:	f7fe f960 	bl	8000dd0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e092      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b1e:	4b4b      	ldr	r3, [pc, #300]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f040 8088 	bne.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b32:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3e:	f7fe f947 	bl	8000dd0 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b46:	f7fe f943 	bl	8000dd0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b64      	cmp	r3, #100	; 0x64
 8002b52:	d901      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e075      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b58:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b64:	d0ef      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d120      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	019a      	lsls	r2, r3, #6
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	4927      	ldr	r1, [pc, #156]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bb6:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	4920      	ldr	r1, [pc, #128]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d018      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be4:	d113      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	0e1b      	lsrs	r3, r3, #24
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	019a      	lsls	r2, r3, #6
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	4911      	ldr	r1, [pc, #68]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1a:	f7fe f8d9 	bl	8000dd0 <HAL_GetTick>
 8002c1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c22:	f7fe f8d5 	bl	8000dd0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e007      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c40:	d1ef      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e040      	b.n	8002ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd ff48 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fb9c 	bl	80033cc <UART_SetConfig>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e022      	b.n	8002ce4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fdf4 	bl	8003894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fe7b 	bl	80039d8 <UART_CheckIdleState>
 8002ce2:	4603      	mov	r3, r0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d178      	bne.n	8002df4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_Transmit_DMA+0x22>
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e071      	b.n	8002df6 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Transmit_DMA+0x34>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e06a      	b.n	8002df6 <HAL_UART_Transmit_DMA+0x10a>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	88fa      	ldrh	r2, [r7, #6]
 8002d32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2221      	movs	r2, #33	; 0x21
 8002d4a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02b      	beq.n	8002dac <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d58:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <HAL_UART_Transmit_DMA+0x114>)
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_UART_Transmit_DMA+0x118>)
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_UART_Transmit_DMA+0x11c>)
 8002d6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d70:	2200      	movs	r2, #0
 8002d72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3328      	adds	r3, #40	; 0x28
 8002d84:	461a      	mov	r2, r3
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	f7fe fa12 	bl	80011b0 <HAL_DMA_Start_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2210      	movs	r2, #16
 8002d96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e024      	b.n	8002df6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	613b      	str	r3, [r7, #16]
   return(result);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	623a      	str	r2, [r7, #32]
 8002dde:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	69f9      	ldr	r1, [r7, #28]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08003cd9 	.word	0x08003cd9
 8002e04:	08003d6f 	.word	0x08003d6f
 8002e08:	08003d8b 	.word	0x08003d8b

08002e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b0ba      	sub	sp, #232	; 0xe8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e36:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d115      	bne.n	8002e74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00f      	beq.n	8002e74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 828f 	beq.w	8003388 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
      }
      return;
 8002e72:	e289      	b.n	8003388 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8117 	beq.w	80030ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e8e:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_UART_IRQHandler+0x298>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 810a 	beq.w	80030ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d011      	beq.n	8002ec8 <HAL_UART_IRQHandler+0xbc>
 8002ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d011      	beq.n	8002ef8 <HAL_UART_IRQHandler+0xec>
 8002ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d011      	beq.n	8002f28 <HAL_UART_IRQHandler+0x11c>
 8002f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2204      	movs	r2, #4
 8002f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1e:	f043 0202 	orr.w	r2, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d017      	beq.n	8002f64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2208      	movs	r2, #8
 8002f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	f043 0208 	orr.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d012      	beq.n	8002f96 <HAL_UART_IRQHandler+0x18a>
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 81f5 	beq.w	800338c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fe6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04f      	beq.n	800308e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fe0f 	bl	8003c12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d141      	bne.n	8003086 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3308      	adds	r3, #8
 8003008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800301c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3308      	adds	r3, #8
 800302a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800302e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800303a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1d9      	bne.n	8003002 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <HAL_UART_IRQHandler+0x29c>)
 800305c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe f974 	bl	8001350 <HAL_DMA_Abort_IT>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d017      	beq.n	800309e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003078:	4610      	mov	r0, r2
 800307a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	e00f      	b.n	800309e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f98e 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	e00b      	b.n	800309e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f98a 	bl	80033a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e007      	b.n	800309e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f986 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800309c:	e176      	b.n	800338c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309e:	bf00      	nop
    return;
 80030a0:	e174      	b.n	800338c <HAL_UART_IRQHandler+0x580>
 80030a2:	bf00      	nop
 80030a4:	04000120 	.word	0x04000120
 80030a8:	08003e07 	.word	0x08003e07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 8144 	bne.w	800333e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 813d 	beq.w	800333e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8136 	beq.w	800333e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2210      	movs	r2, #16
 80030d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	f040 80b2 	bne.w	800324e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8148 	beq.w	8003390 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800310a:	429a      	cmp	r2, r3
 800310c:	f080 8140 	bcs.w	8003390 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003124:	f000 8085 	beq.w	8003232 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800313c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003156:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800315e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003162:	e841 2300 	strex	r3, r2, [r1]
 8003166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800316a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1da      	bne.n	8003128 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3308      	adds	r3, #8
 8003178:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3308      	adds	r3, #8
 8003192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003196:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800319a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800319e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e1      	bne.n	8003172 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3308      	adds	r3, #8
 80031b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3308      	adds	r3, #8
 80031ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e3      	bne.n	80031ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fa:	e853 3f00 	ldrex	r3, [r3]
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	f023 0310 	bic.w	r3, r3, #16
 8003206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003214:	65bb      	str	r3, [r7, #88]	; 0x58
 8003216:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800321a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e4      	bne.n	80031f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe f81f 	bl	8001270 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800323e:	b29b      	uxth	r3, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8b4 	bl	80033b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800324c:	e0a0      	b.n	8003390 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800325a:	b29b      	uxth	r3, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8092 	beq.w	8003394 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8003270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 808d 	beq.w	8003394 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
 800329e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e4      	bne.n	800327a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3308      	adds	r3, #8
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	623b      	str	r3, [r7, #32]
   return(result);
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3308      	adds	r3, #8
 80032d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032d4:	633a      	str	r2, [r7, #48]	; 0x30
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e3      	bne.n	80032b0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	60fb      	str	r3, [r7, #12]
   return(result);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0310 	bic.w	r3, r3, #16
 800330e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	617b      	str	r3, [r7, #20]
   return(result);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e4      	bne.n	80032fa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f83c 	bl	80033b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800333c:	e02a      	b.n	8003394 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800334a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01c      	beq.n	8003398 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
    }
    return;
 8003366:	e017      	b.n	8003398 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <HAL_UART_IRQHandler+0x58e>
 8003374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00c      	beq.n	800339a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fd56 	bl	8003e32 <UART_EndTransmit_IT>
    return;
 8003386:	e008      	b.n	800339a <HAL_UART_IRQHandler+0x58e>
      return;
 8003388:	bf00      	nop
 800338a:	e006      	b.n	800339a <HAL_UART_IRQHandler+0x58e>
    return;
 800338c:	bf00      	nop
 800338e:	e004      	b.n	800339a <HAL_UART_IRQHandler+0x58e>
      return;
 8003390:	bf00      	nop
 8003392:	e002      	b.n	800339a <HAL_UART_IRQHandler+0x58e>
      return;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_UART_IRQHandler+0x58e>
    return;
 8003398:	bf00      	nop
  }

}
 800339a:	37e8      	adds	r7, #232	; 0xe8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4ba6      	ldr	r3, [pc, #664]	; (8003690 <UART_SetConfig+0x2c4>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	430b      	orrs	r3, r1
 8003402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a94      	ldr	r2, [pc, #592]	; (8003694 <UART_SetConfig+0x2c8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d120      	bne.n	800348a <UART_SetConfig+0xbe>
 8003448:	4b93      	ldr	r3, [pc, #588]	; (8003698 <UART_SetConfig+0x2cc>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b03      	cmp	r3, #3
 8003454:	d816      	bhi.n	8003484 <UART_SetConfig+0xb8>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <UART_SetConfig+0x90>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003479 	.word	0x08003479
 8003464:	08003473 	.word	0x08003473
 8003468:	0800347f 	.word	0x0800347f
 800346c:	2301      	movs	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e150      	b.n	8003714 <UART_SetConfig+0x348>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e14d      	b.n	8003714 <UART_SetConfig+0x348>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e14a      	b.n	8003714 <UART_SetConfig+0x348>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e147      	b.n	8003714 <UART_SetConfig+0x348>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e144      	b.n	8003714 <UART_SetConfig+0x348>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a83      	ldr	r2, [pc, #524]	; (800369c <UART_SetConfig+0x2d0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d132      	bne.n	80034fa <UART_SetConfig+0x12e>
 8003494:	4b80      	ldr	r3, [pc, #512]	; (8003698 <UART_SetConfig+0x2cc>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d828      	bhi.n	80034f4 <UART_SetConfig+0x128>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0xdc>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	080034f5 	.word	0x080034f5
 80034b0:	080034f5 	.word	0x080034f5
 80034b4:	080034f5 	.word	0x080034f5
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034f5 	.word	0x080034f5
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080034f5 	.word	0x080034f5
 80034c8:	080034e3 	.word	0x080034e3
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034f5 	.word	0x080034f5
 80034d8:	080034ef 	.word	0x080034ef
 80034dc:	2300      	movs	r3, #0
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e118      	b.n	8003714 <UART_SetConfig+0x348>
 80034e2:	2302      	movs	r3, #2
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e115      	b.n	8003714 <UART_SetConfig+0x348>
 80034e8:	2304      	movs	r3, #4
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e112      	b.n	8003714 <UART_SetConfig+0x348>
 80034ee:	2308      	movs	r3, #8
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e10f      	b.n	8003714 <UART_SetConfig+0x348>
 80034f4:	2310      	movs	r3, #16
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e10c      	b.n	8003714 <UART_SetConfig+0x348>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <UART_SetConfig+0x2d4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d120      	bne.n	8003546 <UART_SetConfig+0x17a>
 8003504:	4b64      	ldr	r3, [pc, #400]	; (8003698 <UART_SetConfig+0x2cc>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d013      	beq.n	800353a <UART_SetConfig+0x16e>
 8003512:	2b30      	cmp	r3, #48	; 0x30
 8003514:	d814      	bhi.n	8003540 <UART_SetConfig+0x174>
 8003516:	2b20      	cmp	r3, #32
 8003518:	d009      	beq.n	800352e <UART_SetConfig+0x162>
 800351a:	2b20      	cmp	r3, #32
 800351c:	d810      	bhi.n	8003540 <UART_SetConfig+0x174>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x15c>
 8003522:	2b10      	cmp	r3, #16
 8003524:	d006      	beq.n	8003534 <UART_SetConfig+0x168>
 8003526:	e00b      	b.n	8003540 <UART_SetConfig+0x174>
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e0f2      	b.n	8003714 <UART_SetConfig+0x348>
 800352e:	2302      	movs	r3, #2
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e0ef      	b.n	8003714 <UART_SetConfig+0x348>
 8003534:	2304      	movs	r3, #4
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e0ec      	b.n	8003714 <UART_SetConfig+0x348>
 800353a:	2308      	movs	r3, #8
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e0e9      	b.n	8003714 <UART_SetConfig+0x348>
 8003540:	2310      	movs	r3, #16
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e0e6      	b.n	8003714 <UART_SetConfig+0x348>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a56      	ldr	r2, [pc, #344]	; (80036a4 <UART_SetConfig+0x2d8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d120      	bne.n	8003592 <UART_SetConfig+0x1c6>
 8003550:	4b51      	ldr	r3, [pc, #324]	; (8003698 <UART_SetConfig+0x2cc>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800355a:	2bc0      	cmp	r3, #192	; 0xc0
 800355c:	d013      	beq.n	8003586 <UART_SetConfig+0x1ba>
 800355e:	2bc0      	cmp	r3, #192	; 0xc0
 8003560:	d814      	bhi.n	800358c <UART_SetConfig+0x1c0>
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d009      	beq.n	800357a <UART_SetConfig+0x1ae>
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d810      	bhi.n	800358c <UART_SetConfig+0x1c0>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <UART_SetConfig+0x1a8>
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d006      	beq.n	8003580 <UART_SetConfig+0x1b4>
 8003572:	e00b      	b.n	800358c <UART_SetConfig+0x1c0>
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e0cc      	b.n	8003714 <UART_SetConfig+0x348>
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e0c9      	b.n	8003714 <UART_SetConfig+0x348>
 8003580:	2304      	movs	r3, #4
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e0c6      	b.n	8003714 <UART_SetConfig+0x348>
 8003586:	2308      	movs	r3, #8
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e0c3      	b.n	8003714 <UART_SetConfig+0x348>
 800358c:	2310      	movs	r3, #16
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e0c0      	b.n	8003714 <UART_SetConfig+0x348>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <UART_SetConfig+0x2dc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d125      	bne.n	80035e8 <UART_SetConfig+0x21c>
 800359c:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <UART_SetConfig+0x2cc>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035aa:	d017      	beq.n	80035dc <UART_SetConfig+0x210>
 80035ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b0:	d817      	bhi.n	80035e2 <UART_SetConfig+0x216>
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d00b      	beq.n	80035d0 <UART_SetConfig+0x204>
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d811      	bhi.n	80035e2 <UART_SetConfig+0x216>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <UART_SetConfig+0x1fe>
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	d006      	beq.n	80035d6 <UART_SetConfig+0x20a>
 80035c8:	e00b      	b.n	80035e2 <UART_SetConfig+0x216>
 80035ca:	2300      	movs	r3, #0
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e0a1      	b.n	8003714 <UART_SetConfig+0x348>
 80035d0:	2302      	movs	r3, #2
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e09e      	b.n	8003714 <UART_SetConfig+0x348>
 80035d6:	2304      	movs	r3, #4
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e09b      	b.n	8003714 <UART_SetConfig+0x348>
 80035dc:	2308      	movs	r3, #8
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e098      	b.n	8003714 <UART_SetConfig+0x348>
 80035e2:	2310      	movs	r3, #16
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e095      	b.n	8003714 <UART_SetConfig+0x348>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <UART_SetConfig+0x2e0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d125      	bne.n	800363e <UART_SetConfig+0x272>
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <UART_SetConfig+0x2cc>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003600:	d017      	beq.n	8003632 <UART_SetConfig+0x266>
 8003602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003606:	d817      	bhi.n	8003638 <UART_SetConfig+0x26c>
 8003608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360c:	d00b      	beq.n	8003626 <UART_SetConfig+0x25a>
 800360e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003612:	d811      	bhi.n	8003638 <UART_SetConfig+0x26c>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <UART_SetConfig+0x254>
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d006      	beq.n	800362c <UART_SetConfig+0x260>
 800361e:	e00b      	b.n	8003638 <UART_SetConfig+0x26c>
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e076      	b.n	8003714 <UART_SetConfig+0x348>
 8003626:	2302      	movs	r3, #2
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e073      	b.n	8003714 <UART_SetConfig+0x348>
 800362c:	2304      	movs	r3, #4
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e070      	b.n	8003714 <UART_SetConfig+0x348>
 8003632:	2308      	movs	r3, #8
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e06d      	b.n	8003714 <UART_SetConfig+0x348>
 8003638:	2310      	movs	r3, #16
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e06a      	b.n	8003714 <UART_SetConfig+0x348>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <UART_SetConfig+0x2e4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d138      	bne.n	80036ba <UART_SetConfig+0x2ee>
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <UART_SetConfig+0x2cc>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003656:	d017      	beq.n	8003688 <UART_SetConfig+0x2bc>
 8003658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800365c:	d82a      	bhi.n	80036b4 <UART_SetConfig+0x2e8>
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d00b      	beq.n	800367c <UART_SetConfig+0x2b0>
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003668:	d824      	bhi.n	80036b4 <UART_SetConfig+0x2e8>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <UART_SetConfig+0x2aa>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	d006      	beq.n	8003682 <UART_SetConfig+0x2b6>
 8003674:	e01e      	b.n	80036b4 <UART_SetConfig+0x2e8>
 8003676:	2300      	movs	r3, #0
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e04b      	b.n	8003714 <UART_SetConfig+0x348>
 800367c:	2302      	movs	r3, #2
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e048      	b.n	8003714 <UART_SetConfig+0x348>
 8003682:	2304      	movs	r3, #4
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e045      	b.n	8003714 <UART_SetConfig+0x348>
 8003688:	2308      	movs	r3, #8
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e042      	b.n	8003714 <UART_SetConfig+0x348>
 800368e:	bf00      	nop
 8003690:	efff69f3 	.word	0xefff69f3
 8003694:	40011000 	.word	0x40011000
 8003698:	40023800 	.word	0x40023800
 800369c:	40004400 	.word	0x40004400
 80036a0:	40004800 	.word	0x40004800
 80036a4:	40004c00 	.word	0x40004c00
 80036a8:	40005000 	.word	0x40005000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	40007800 	.word	0x40007800
 80036b4:	2310      	movs	r3, #16
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e02c      	b.n	8003714 <UART_SetConfig+0x348>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a72      	ldr	r2, [pc, #456]	; (8003888 <UART_SetConfig+0x4bc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d125      	bne.n	8003710 <UART_SetConfig+0x344>
 80036c4:	4b71      	ldr	r3, [pc, #452]	; (800388c <UART_SetConfig+0x4c0>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036d2:	d017      	beq.n	8003704 <UART_SetConfig+0x338>
 80036d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036d8:	d817      	bhi.n	800370a <UART_SetConfig+0x33e>
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036de:	d00b      	beq.n	80036f8 <UART_SetConfig+0x32c>
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e4:	d811      	bhi.n	800370a <UART_SetConfig+0x33e>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <UART_SetConfig+0x326>
 80036ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ee:	d006      	beq.n	80036fe <UART_SetConfig+0x332>
 80036f0:	e00b      	b.n	800370a <UART_SetConfig+0x33e>
 80036f2:	2300      	movs	r3, #0
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e00d      	b.n	8003714 <UART_SetConfig+0x348>
 80036f8:	2302      	movs	r3, #2
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e00a      	b.n	8003714 <UART_SetConfig+0x348>
 80036fe:	2304      	movs	r3, #4
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e007      	b.n	8003714 <UART_SetConfig+0x348>
 8003704:	2308      	movs	r3, #8
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x348>
 800370a:	2310      	movs	r3, #16
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e001      	b.n	8003714 <UART_SetConfig+0x348>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d15b      	bne.n	80037d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800371e:	7ffb      	ldrb	r3, [r7, #31]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d828      	bhi.n	8003776 <UART_SetConfig+0x3aa>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x360>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003751 	.word	0x08003751
 8003730:	08003759 	.word	0x08003759
 8003734:	08003761 	.word	0x08003761
 8003738:	08003777 	.word	0x08003777
 800373c:	08003767 	.word	0x08003767
 8003740:	08003777 	.word	0x08003777
 8003744:	08003777 	.word	0x08003777
 8003748:	08003777 	.word	0x08003777
 800374c:	0800376f 	.word	0x0800376f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003750:	f7fe ff0c 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 8003754:	61b8      	str	r0, [r7, #24]
        break;
 8003756:	e013      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7fe ff1c 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800375c:	61b8      	str	r0, [r7, #24]
        break;
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <UART_SetConfig+0x4c4>)
 8003762:	61bb      	str	r3, [r7, #24]
        break;
 8003764:	e00c      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003766:	f7fe fe2f 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 800376a:	61b8      	str	r0, [r7, #24]
        break;
 800376c:	e008      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003772:	61bb      	str	r3, [r7, #24]
        break;
 8003774:	e004      	b.n	8003780 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	77bb      	strb	r3, [r7, #30]
        break;
 800377e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d074      	beq.n	8003870 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	005a      	lsls	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b0f      	cmp	r3, #15
 80037a0:	d916      	bls.n	80037d0 <UART_SetConfig+0x404>
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d212      	bcs.n	80037d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f023 030f 	bic.w	r3, r3, #15
 80037b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	b29a      	uxth	r2, r3
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	89fa      	ldrh	r2, [r7, #14]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e04f      	b.n	8003870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77bb      	strb	r3, [r7, #30]
 80037d4:	e04c      	b.n	8003870 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d828      	bhi.n	800382e <UART_SetConfig+0x462>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0x418>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003819 	.word	0x08003819
 80037f0:	0800382f 	.word	0x0800382f
 80037f4:	0800381f 	.word	0x0800381f
 80037f8:	0800382f 	.word	0x0800382f
 80037fc:	0800382f 	.word	0x0800382f
 8003800:	0800382f 	.word	0x0800382f
 8003804:	08003827 	.word	0x08003827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7fe feb0 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 800380c:	61b8      	str	r0, [r7, #24]
        break;
 800380e:	e013      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003810:	f7fe fec0 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8003814:	61b8      	str	r0, [r7, #24]
        break;
 8003816:	e00f      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <UART_SetConfig+0x4c4>)
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e00c      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381e:	f7fe fdd3 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8003822:	61b8      	str	r0, [r7, #24]
        break;
 8003824:	e008      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382a:	61bb      	str	r3, [r7, #24]
        break;
 800382c:	e004      	b.n	8003838 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	77bb      	strb	r3, [r7, #30]
        break;
 8003836:	bf00      	nop
    }

    if (pclk != 0U)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	085a      	lsrs	r2, r3, #1
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d909      	bls.n	800386c <UART_SetConfig+0x4a0>
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385e:	d205      	bcs.n	800386c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e001      	b.n	8003870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800387c:	7fbb      	ldrb	r3, [r7, #30]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40007c00 	.word	0x40007c00
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01a      	beq.n	80039aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d10a      	bne.n	80039aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e8:	f7fd f9f2 	bl	8000dd0 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d10e      	bne.n	8003a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f817 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e00d      	b.n	8003a36 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b09c      	sub	sp, #112	; 0x70
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	e0a5      	b.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	f000 80a1 	beq.w	8003b9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fd f9b9 	bl	8000dd0 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d13e      	bne.n	8003aee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a84:	667b      	str	r3, [r7, #100]	; 0x64
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e6      	bne.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e067      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d04f      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0a:	d147      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
 8003b36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	613b      	str	r3, [r7, #16]
   return(result);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b68:	623a      	str	r2, [r7, #32]
 8003b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69f9      	ldr	r1, [r7, #28]
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e010      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	f43f af4a 	beq.w	8003a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3770      	adds	r7, #112	; 0x70
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b089      	sub	sp, #36	; 0x24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6979      	ldr	r1, [r7, #20]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e6      	bne.n	8003bce <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003c06:	bf00      	nop
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b095      	sub	sp, #84	; 0x54
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3308      	adds	r3, #8
 8003c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e5      	bne.n	8003c4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d118      	bne.n	8003cba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f023 0310 	bic.w	r3, r3, #16
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca6:	61bb      	str	r3, [r7, #24]
 8003ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6979      	ldr	r1, [r7, #20]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e6      	bne.n	8003c88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ccc:	bf00      	nop
 8003cce:	3754      	adds	r7, #84	; 0x54
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b090      	sub	sp, #64	; 0x40
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	d037      	beq.n	8003d60 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	623b      	str	r3, [r7, #32]
   return(result);
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d18:	633a      	str	r2, [r7, #48]	; 0x30
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	69b9      	ldr	r1, [r7, #24]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	617b      	str	r3, [r7, #20]
   return(result);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e6      	bne.n	8003d2c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d5e:	e002      	b.n	8003d66 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8003d60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d62:	f7fc fd4d 	bl	8000800 <HAL_UART_TxCpltCallback>
}
 8003d66:	bf00      	nop
 8003d68:	3740      	adds	r7, #64	; 0x40
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7fc fd23 	bl	80007c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d109      	bne.n	8003dc6 <UART_DMAError+0x3c>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b21      	cmp	r3, #33	; 0x21
 8003db6:	d106      	bne.n	8003dc6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003dc0:	6978      	ldr	r0, [r7, #20]
 8003dc2:	f7ff ff00 	bl	8003bc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d109      	bne.n	8003de8 <UART_DMAError+0x5e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b22      	cmp	r3, #34	; 0x22
 8003dd8:	d106      	bne.n	8003de8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f7ff ff15 	bl	8003c12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dee:	f043 0210 	orr.w	r2, r3, #16
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df8:	6978      	ldr	r0, [r7, #20]
 8003dfa:	f7ff fad1 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff fabb 	bl	80033a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b088      	sub	sp, #32
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6979      	ldr	r1, [r7, #20]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	613b      	str	r3, [r7, #16]
   return(result);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e6      	bne.n	8003e3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fc fcc1 	bl	8000800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7e:	bf00      	nop
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <atoi>:
 8003e86:	220a      	movs	r2, #10
 8003e88:	2100      	movs	r1, #0
 8003e8a:	f000 b8c9 	b.w	8004020 <strtol>
	...

08003e90 <__errno>:
 8003e90:	4b01      	ldr	r3, [pc, #4]	; (8003e98 <__errno+0x8>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <__libc_init_array>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4d0d      	ldr	r5, [pc, #52]	; (8003ed4 <__libc_init_array+0x38>)
 8003ea0:	4c0d      	ldr	r4, [pc, #52]	; (8003ed8 <__libc_init_array+0x3c>)
 8003ea2:	1b64      	subs	r4, r4, r5
 8003ea4:	10a4      	asrs	r4, r4, #2
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	42a6      	cmp	r6, r4
 8003eaa:	d109      	bne.n	8003ec0 <__libc_init_array+0x24>
 8003eac:	4d0b      	ldr	r5, [pc, #44]	; (8003edc <__libc_init_array+0x40>)
 8003eae:	4c0c      	ldr	r4, [pc, #48]	; (8003ee0 <__libc_init_array+0x44>)
 8003eb0:	f000 f8c0 	bl	8004034 <_init>
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	2600      	movs	r6, #0
 8003eba:	42a6      	cmp	r6, r4
 8003ebc:	d105      	bne.n	8003eca <__libc_init_array+0x2e>
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec4:	4798      	blx	r3
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7ee      	b.n	8003ea8 <__libc_init_array+0xc>
 8003eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ece:	4798      	blx	r3
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7f2      	b.n	8003eba <__libc_init_array+0x1e>
 8003ed4:	080041a0 	.word	0x080041a0
 8003ed8:	080041a0 	.word	0x080041a0
 8003edc:	080041a0 	.word	0x080041a0
 8003ee0:	080041a4 	.word	0x080041a4

08003ee4 <memset>:
 8003ee4:	4402      	add	r2, r0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d100      	bne.n	8003eee <memset+0xa>
 8003eec:	4770      	bx	lr
 8003eee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef2:	e7f9      	b.n	8003ee8 <memset+0x4>

08003ef4 <strncpy>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	3901      	subs	r1, #1
 8003ef8:	4603      	mov	r3, r0
 8003efa:	b132      	cbz	r2, 8003f0a <strncpy+0x16>
 8003efc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003f00:	f803 4b01 	strb.w	r4, [r3], #1
 8003f04:	3a01      	subs	r2, #1
 8003f06:	2c00      	cmp	r4, #0
 8003f08:	d1f7      	bne.n	8003efa <strncpy+0x6>
 8003f0a:	441a      	add	r2, r3
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d100      	bne.n	8003f14 <strncpy+0x20>
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	f803 1b01 	strb.w	r1, [r3], #1
 8003f18:	e7f9      	b.n	8003f0e <strncpy+0x1a>
	...

08003f1c <_strtol_l.constprop.0>:
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f22:	d001      	beq.n	8003f28 <_strtol_l.constprop.0+0xc>
 8003f24:	2b24      	cmp	r3, #36	; 0x24
 8003f26:	d906      	bls.n	8003f36 <_strtol_l.constprop.0+0x1a>
 8003f28:	f7ff ffb2 	bl	8003e90 <__errno>
 8003f2c:	2316      	movs	r3, #22
 8003f2e:	6003      	str	r3, [r0, #0]
 8003f30:	2000      	movs	r0, #0
 8003f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800401c <_strtol_l.constprop.0+0x100>
 8003f3a:	460d      	mov	r5, r1
 8003f3c:	462e      	mov	r6, r5
 8003f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f42:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003f46:	f017 0708 	ands.w	r7, r7, #8
 8003f4a:	d1f7      	bne.n	8003f3c <_strtol_l.constprop.0+0x20>
 8003f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8003f4e:	d132      	bne.n	8003fb6 <_strtol_l.constprop.0+0x9a>
 8003f50:	782c      	ldrb	r4, [r5, #0]
 8003f52:	2701      	movs	r7, #1
 8003f54:	1cb5      	adds	r5, r6, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d05b      	beq.n	8004012 <_strtol_l.constprop.0+0xf6>
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d109      	bne.n	8003f72 <_strtol_l.constprop.0+0x56>
 8003f5e:	2c30      	cmp	r4, #48	; 0x30
 8003f60:	d107      	bne.n	8003f72 <_strtol_l.constprop.0+0x56>
 8003f62:	782c      	ldrb	r4, [r5, #0]
 8003f64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f68:	2c58      	cmp	r4, #88	; 0x58
 8003f6a:	d14d      	bne.n	8004008 <_strtol_l.constprop.0+0xec>
 8003f6c:	786c      	ldrb	r4, [r5, #1]
 8003f6e:	2310      	movs	r3, #16
 8003f70:	3502      	adds	r5, #2
 8003f72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f76:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f7a:	f04f 0c00 	mov.w	ip, #0
 8003f7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f82:	4666      	mov	r6, ip
 8003f84:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f8c:	f1be 0f09 	cmp.w	lr, #9
 8003f90:	d816      	bhi.n	8003fc0 <_strtol_l.constprop.0+0xa4>
 8003f92:	4674      	mov	r4, lr
 8003f94:	42a3      	cmp	r3, r4
 8003f96:	dd24      	ble.n	8003fe2 <_strtol_l.constprop.0+0xc6>
 8003f98:	f1bc 0f00 	cmp.w	ip, #0
 8003f9c:	db1e      	blt.n	8003fdc <_strtol_l.constprop.0+0xc0>
 8003f9e:	45b1      	cmp	r9, r6
 8003fa0:	d31c      	bcc.n	8003fdc <_strtol_l.constprop.0+0xc0>
 8003fa2:	d101      	bne.n	8003fa8 <_strtol_l.constprop.0+0x8c>
 8003fa4:	45a2      	cmp	sl, r4
 8003fa6:	db19      	blt.n	8003fdc <_strtol_l.constprop.0+0xc0>
 8003fa8:	fb06 4603 	mla	r6, r6, r3, r4
 8003fac:	f04f 0c01 	mov.w	ip, #1
 8003fb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fb4:	e7e8      	b.n	8003f88 <_strtol_l.constprop.0+0x6c>
 8003fb6:	2c2b      	cmp	r4, #43	; 0x2b
 8003fb8:	bf04      	itt	eq
 8003fba:	782c      	ldrbeq	r4, [r5, #0]
 8003fbc:	1cb5      	addeq	r5, r6, #2
 8003fbe:	e7ca      	b.n	8003f56 <_strtol_l.constprop.0+0x3a>
 8003fc0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003fc4:	f1be 0f19 	cmp.w	lr, #25
 8003fc8:	d801      	bhi.n	8003fce <_strtol_l.constprop.0+0xb2>
 8003fca:	3c37      	subs	r4, #55	; 0x37
 8003fcc:	e7e2      	b.n	8003f94 <_strtol_l.constprop.0+0x78>
 8003fce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003fd2:	f1be 0f19 	cmp.w	lr, #25
 8003fd6:	d804      	bhi.n	8003fe2 <_strtol_l.constprop.0+0xc6>
 8003fd8:	3c57      	subs	r4, #87	; 0x57
 8003fda:	e7db      	b.n	8003f94 <_strtol_l.constprop.0+0x78>
 8003fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8003fe0:	e7e6      	b.n	8003fb0 <_strtol_l.constprop.0+0x94>
 8003fe2:	f1bc 0f00 	cmp.w	ip, #0
 8003fe6:	da05      	bge.n	8003ff4 <_strtol_l.constprop.0+0xd8>
 8003fe8:	2322      	movs	r3, #34	; 0x22
 8003fea:	6003      	str	r3, [r0, #0]
 8003fec:	4646      	mov	r6, r8
 8003fee:	b942      	cbnz	r2, 8004002 <_strtol_l.constprop.0+0xe6>
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	e79e      	b.n	8003f32 <_strtol_l.constprop.0+0x16>
 8003ff4:	b107      	cbz	r7, 8003ff8 <_strtol_l.constprop.0+0xdc>
 8003ff6:	4276      	negs	r6, r6
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	d0f9      	beq.n	8003ff0 <_strtol_l.constprop.0+0xd4>
 8003ffc:	f1bc 0f00 	cmp.w	ip, #0
 8004000:	d000      	beq.n	8004004 <_strtol_l.constprop.0+0xe8>
 8004002:	1e69      	subs	r1, r5, #1
 8004004:	6011      	str	r1, [r2, #0]
 8004006:	e7f3      	b.n	8003ff0 <_strtol_l.constprop.0+0xd4>
 8004008:	2430      	movs	r4, #48	; 0x30
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1b1      	bne.n	8003f72 <_strtol_l.constprop.0+0x56>
 800400e:	2308      	movs	r3, #8
 8004010:	e7af      	b.n	8003f72 <_strtol_l.constprop.0+0x56>
 8004012:	2c30      	cmp	r4, #48	; 0x30
 8004014:	d0a5      	beq.n	8003f62 <_strtol_l.constprop.0+0x46>
 8004016:	230a      	movs	r3, #10
 8004018:	e7ab      	b.n	8003f72 <_strtol_l.constprop.0+0x56>
 800401a:	bf00      	nop
 800401c:	08004095 	.word	0x08004095

08004020 <strtol>:
 8004020:	4613      	mov	r3, r2
 8004022:	460a      	mov	r2, r1
 8004024:	4601      	mov	r1, r0
 8004026:	4802      	ldr	r0, [pc, #8]	; (8004030 <strtol+0x10>)
 8004028:	6800      	ldr	r0, [r0, #0]
 800402a:	f7ff bf77 	b.w	8003f1c <_strtol_l.constprop.0>
 800402e:	bf00      	nop
 8004030:	2000000c 	.word	0x2000000c

08004034 <_init>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr

08004040 <_fini>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr
